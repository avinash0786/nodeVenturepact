var express=require('express');
var passport = require("passport");

var router=express.Router();
var OauthCont=require('../controllers/oAuthLogin');
// Oauth service handler

router.get('/login',((req, res) => {
    res.render('oauthLogin')
}))
// http://localhost:3000/oauth/google/callback

// GET /auth/google
//   Use passport.authenticate() as route middleware to authenticate the
//   request.  The first step in Google authentication will involve redirecting
//   the user to google.com.  After authorization, Google will redirect the user
//   back to this application at /auth/google/callback

router.get('/google', passport.authenticate('google', { scope:  [ 'email', 'profile' ]  }));

// GET /auth/google/callback
//   Use passport.authenticate() as route middleware to authenticate the
//   request.  If authentication fails, the user will be redirected back to the
//   login page.  Otherwise, the primary route function function will be called,
//   which, in this example, will redirect the user to the home page.

router.get('/google/callback',
    passport.authenticate('google', {
        successRedirect:'/oauth/good',
        failureRedirect: '/oauth/failure' ,
    }));

router.get('/failed',(req, res) => {
    res.send("Failed oAuth")
})
router.get('/good',(req, res) => {
    console.log(req.session)
    console.log(req.user)
    res.render("profileCard",{
        name:req.user.name,
        image:req.user.profileImage,
        email:req.user.email
    })
})
router.get("/logout",((req, res) => {
    req.logout();
    res.redirect('/');
}))

router.get('/checkSession',((req, res) => {
    console.log("Check session call")
    console.log(req.user)
    res.json(req.user)
}))
module.exports=router;